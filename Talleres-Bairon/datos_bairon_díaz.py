# -*- coding: utf-8 -*-
"""Datos-Bairon-Díaz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OpbBH1D5lvD5RyWMHyuMbiA6r-mFqV3Y
"""

import pandas as pd
import numpy as np

pd.set_option(
    "display.max.columns",
    50
)

print("Entorno listo")

# Reemplazar la carga de archivos de Colab por entrada estándar
filename = input("Ingrese el nombre del archivo CSV a procesar: ")

df = pd.read_csv(
    filename,
    encoding = "utf-8",
    low_memory = False
)

print("Tamaño (filas, columnas): ", df.shape)
print(df.head(3))
df.info()

if "id_cliente" in df.columns:
    df["id_cliente"] = df["id_cliente"].astype("string")

if "fecha" in df.columns:
    df["fecha"] = pd.to_datetime(df["fecha"], errors="coerce", dayfirst=True)

# NUMEROS LIMPIOS Y SU TIPO SEA NUMÉRICO

cols_numericas = []
for c in ["Unidades", "precio"]:
    if c in df.columns:
        cols_numericas.append(c)

for c in cols_numericas:
    serie_txt = df[c].astype("string")

    # Eliminar caracteres no numéricos (excepto dígitos, punto, slash y guion)
    serie_txt = serie_txt.str.replace(
        r"[^0-9./-]",
        "",
        regex=True
    )

    # Eliminar puntos (útil si son separadores de miles)
    serie_txt = serie_txt.str.replace(
        ".",
        "",
        regex=False
    )

    # Convertir a tipo numérico
    df[c] = pd.to_numeric(
        serie_txt,
        errors="coerce"
    )

# Mostrar resumen del DataFrame
df.info()

#IMPUTAR NULOS CON LA MEDIANA
num_cols = df.select_dtypes(
    include=["float", "int"]
).columns

print ("columnas numericas: ", list (num_cols))

text_cols = df.select_dtypes(
    include=["object", "string", "category"]
).columns

print ("columnas de texto: ", list (text_cols))

for c in num_cols:
    n_antes = df[c].isna().sum()
    mediana = df[c].median()
    df[c] = df[c].fillna(mediana)
    n_despues = df[c].isna().sum()

    print (
        "Numerico ", c,
        "\n nulos antes: ", n_antes,
        "\n mediana usada: ", mediana,
        "\n nulos despues: ", n_despues
    )

#NULOS EN TEXTO
for c in text_cols:
    n_antes = df[c].isna().sum()
    col = df[c].astype("string")
    col = col.str.strip()
    col = col.fillna("desconocido")
    df[c] = col
    df[c] = df[c].fillna("desconocido")
    n_despues = df[c].isna().sum()
    print(
        "Texto:", c,
        "| nulos antes:", n_antes,
        "| valor usado: 'desconocido'",
        "| nulos después:", n_despues
    )

#DUPLICADOS
filas_antes = len(df)

dup_count = df.duplicated().sum()

df = df.drop_duplicates().copy()

filas_despues = len(df)

print(
    "Duplicados exactos detectados: ", dup_count,
    "\nFilas antes: ", filas_antes,
    "\nFilas despues: ", filas_despues,
    "\nFilas eliminadas: ", filas_antes - filas_despues
)

print("Nulos por columna (DESPUÉS) ")

print("Nulos por columna (ANTES):")
print(df.isna().sum())

print("Nulos por columna (DESPUES):")
print(df.isna().sum())

tengo_campos = set([
    "unidades", "precio"
]).issubset(
    df.columns
)

if tengo_campos:
    df["unidades"] = pd.to_numeric(df["unidades"], errors="coerce")
    df["precio"] = pd.to_numeric(df["precio"], errors="coerce")
    df["ingresos"] = df["unidades"] * df["precio"]

print(df.head(5))

# VERIFICACION FINAL Y EXPORTACION

# Estadísticas descriptivas de todas las columnas
print("Resumen estadístico:")
print(df.describe(include="all"))

# Primeras 10 filas del DataFrame
print("\nPrimeras 10 filas:")
print(df.head(10))

# Guardar el DataFrame como CSV
df.to_csv("dataset_nuevo.csv", index=False, encoding="utf-8")
print("\n✅ Archivo 'dataset_nuevo.csv' guardado correctamente.")

# Descargar el archivo en Google Colab
from google.colab import files
files.download("dataset_nuevo.csv")